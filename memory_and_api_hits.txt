./memory_api.py:20:    from .memory import get_memory  # type: ignore
./memory_api.py:23:    from memory import get_memory  # type: ignore
./memory_api.py:93:    return get_memory()
./memory_api.py:257:        from memory import _backup_db as __backup  # type: ignore
./memory_api.py:269:        from memory import _vacuum_if_needed as __vac  # type: ignore
./memory_api.py:277:        from memory import _prune_lowscore_facts as __prune  # type: ignore
./memory_api.py:285:        from memory import _integrity_check as __integrity  # type: ignore
./memory_api.py:293:        from memory import _rebuild_fts as __rebuild_fts  # type: ignore
./fix_writing_all_pro.py:176:    from . import memory as _memory_mod
./fix_writing_all_pro.py:250:        # Preferuj aktualny kontrakt poprzez singleton `get_memory()`
./fix_writing_all_pro.py:251:        get_mem = getattr(memory, "get_memory", None)
./fix_writing_all_pro.py:391:def llm_chat(
./fix_writing_all_pro.py:433:def mini_llm_text(prompt: str, max_tokens: int = 256, temperature: float = 0.3) -> str:
./fix_writing_all_pro.py:1222:        para = mini_llm_text(  # dostÄ™pne w pliku
./.venv/lib64/python3.11/site-packages/virtualenv/discovery/builtin.py:248:            match = pat.fullmatch(exe.name)
./.venv/lib64/python3.11/site-packages/virtualenv/create/via_global_ref/builtin/cpython/common.py:59:    return interpreter.platform == "darwin" and _BREW.fullmatch(interpreter.system_prefix) is not None
./.venv/lib64/python3.11/site-packages/jupyterlab_server/translation_utils.py:707:                    if pattern.fullmatch(path):
./.venv/lib64/python3.11/site-packages/jupyter_server/auth/utils.py:76:        if pattern.fullmatch(url):
./.venv/lib64/python3.11/site-packages/fastapi/routing.py:970:    def api_route(
./.venv/lib64/python3.11/site-packages/fastapi/applications.py:1143:    def api_route(
./.venv/lib64/python3.11/site-packages/jsonschema/_format.py:432:    return bool(_RE_DATE.fullmatch(instance) and date.fromisoformat(instance))
./.venv/lib64/python3.11/site-packages/httpx/_urlparse.py:285:            if not COMPONENT_REGEX[key].fullmatch(value):
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:169:    # handle to the currently running llm task that appends suggestions to the
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:172:    _llm_task: asyncio.Task | None = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:176:    _init_llm_provider: Callable | None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:178:    _llm_provider_instance: Any | None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:179:    _llm_prefixer: Callable = lambda self, x: "wrong"
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:185:        self._llm_provider_instance = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:186:        self._init_llm_provider = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:193:        self._cancel_running_llm_task()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:219:        self._cancel_running_llm_task()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:274:        self._cancel_running_llm_task()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:291:        self._cancel_running_llm_task()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:307:    def _cancel_running_llm_task(self) -> None:
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:309:        Try to cancel the currently running llm_task if exists, and set it to None.
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:311:        if self._llm_task is not None:
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:312:            if self._llm_task.done():
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:313:                self._llm_task = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:315:            cancelled = self._llm_task.cancel()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:317:                self._llm_task = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:324:    def _llm_provider(self):
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:327:        Do not use in the constructor, as `_init_llm_provider` can trigger slow side-effects.
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:329:        if self._llm_provider_instance is None and self._init_llm_provider:
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:330:            self._llm_provider_instance = self._init_llm_provider()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:331:        return self._llm_provider_instance
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:333:    async def _trigger_llm(self, buffer) -> None:
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:335:        This will ask the current llm provider a suggestion for the current buffer.
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:337:        If there is a currently running llm task, it will cancel it.
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:344:        if not self._llm_provider:
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:350:        self._cancel_running_llm_task()
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:358:                await self._trigger_llm_core(buffer)
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:364:        self._llm_task = asyncio.create_task(error_catcher(buffer))
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:365:        await self._llm_task
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:367:    async def _trigger_llm_core(self, buffer: Buffer):
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:369:        This is the core of the current llm request.
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:371:        Here we build a compatible `InlineCompletionRequest` and ask the llm
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:398:        if not self._llm_provider:
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:402:        prefix = self._llm_prefixer(hm)
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:419:        async for reply_and_chunks in self._llm_provider.stream_inline_completions(
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:440:async def llm_autosuggestion(event: KeyPressEvent):
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:459:    await provider._trigger_llm(event.current_buffer)
./.venv/lib64/python3.11/site-packages/IPython/terminal/shortcuts/__init__.py:630:    auto_suggest.llm_autosuggestion,
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:440:    llm_constructor_kwargs = Dict(
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:443:        Extra arguments to pass to `llm_provider_class` constructor.
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:448:    llm_prefix_from_history = DottedObjectName(
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:452:    return a prefix to pass the llm provider in addition to the current buffer
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:465:    _llm_prefix_from_history: Any
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:467:    @observe("llm_prefix_from_history")
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:468:    def _llm_prefix_from_history_changed(self, change):
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:470:        self._llm_prefix_from_history = name
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:473:    llm_provider_class = DottedObjectName(
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:487:    _llm_provider_class: Any = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:489:    @observe("llm_provider_class")
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:490:    def _llm_provider_class_changed(self, change):
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:492:        self._llm_provider_class = provider_class
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:509:            if self._llm_provider_class:
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:511:                def init_llm_provider():
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:512:                    llm_provider_constructor = import_item(self._llm_provider_class)
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:513:                    return llm_provider_constructor(**self.llm_constructor_kwargs)
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:516:                init_llm_provider = None
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:519:            self.auto_suggest._init_llm_provider = init_llm_provider
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:521:            name = self.llm_prefix_from_history
./.venv/lib64/python3.11/site-packages/IPython/terminal/interactiveshell.py:539:            self.auto_suggest._llm_prefixer = fun
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:27:    ...     format_type = 'x-vendor/llm'
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:28:    ...     print_method = '_repr_llm_'
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:31:    >>> llm_formatter = LLMFormatter(parent=ip.display_formatter)
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:33:    >>> ip.display_formatter.formatters[LLMFormatter.format_type] = llm_formatter
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:35:Now any class that define `_repr_llm_` will return a x-vendor/llm as part of
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:40:    ...     def _repr_llm_(self, *kwargs):
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:45:    ({'text/plain': '<IPython.core.formatters.A at ...>', 'x-vendor/llm': 'This a A'}, {})
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:50:    >>> def llm_int(obj):
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:53:    >>> llm_formatter.for_type(int, llm_int)
./.venv/lib64/python3.11/site-packages/IPython/core/formatters.py:56:    ({'text/plain': '42', 'x-vendor/llm': 'This is the integer 42, in between 41 and 43'}, {})
./.venv/lib64/python3.11/site-packages/IPython/core/completer.py:428:    - Insert any %magic and %%cellmagic completions in the alphabetical order
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:850:# str.fullmatch
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:854:def test_fullmatch(any_string_dtype):
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:859:    result = ser.str.fullmatch(".*BAD[_]+.*BAD")
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:871:def test_fullmatch_dollar_literal(any_string_dtype):
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:874:    result = ser.str.fullmatch("foo\\$")
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:886:def test_fullmatch_na_kwarg(any_string_dtype):
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:890:    result = ser.str.fullmatch(".*BAD[_]+.*BAD", na=False)
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:898:def test_fullmatch_case_kwarg(any_string_dtype):
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:906:    result = ser.str.fullmatch("ab", case=True)
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:911:    result = ser.str.fullmatch("ab", case=False)
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:914:    result = ser.str.fullmatch("ab", flags=re.IGNORECASE)
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:918:def test_fullmatch_compiled_regex(any_string_dtype):
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:921:    result = values.str.fullmatch(re.compile(r"ab"), case=False)
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:1116:    result = data.str.fullmatch(pat, flags=re.IGNORECASE)
./.venv/lib64/python3.11/site-packages/pandas/tests/strings/conftest.py:33:    ("fullmatch", ("a",), {}),
./.venv/lib64/python3.11/site-packages/pandas/tests/extension/test_arrow.py:1893:def test_str_fullmatch(pat, case, na, exp):
./.venv/lib64/python3.11/site-packages/pandas/core/strings/object_array.py:262:    def _str_fullmatch(
./.venv/lib64/python3.11/site-packages/pandas/core/strings/object_array.py:275:        f = lambda x: regex.fullmatch(x) is not None
./.venv/lib64/python3.11/site-packages/pandas/core/strings/base.py:97:    def _str_fullmatch(
./.venv/lib64/python3.11/site-packages/pandas/core/strings/accessor.py:1374:        fullmatch : Stricter matching that requires the entire string to match.
./.venv/lib64/python3.11/site-packages/pandas/core/strings/accessor.py:1392:    def fullmatch(self, pat, case: bool = True, flags: int = 0, na=lib.no_default):
./.venv/lib64/python3.11/site-packages/pandas/core/strings/accessor.py:1423:        >>> ser.str.fullmatch(r'd.+')
./.venv/lib64/python3.11/site-packages/pandas/core/strings/accessor.py:1429:        result = self._data.array._str_fullmatch(pat, case=case, flags=flags, na=na)
./.venv/lib64/python3.11/site-packages/pandas/core/arrays/string_arrow.py:333:    _str_fullmatch = ArrowStringArrayMixin._str_fullmatch
./.venv/lib64/python3.11/site-packages/pandas/core/arrays/_arrow_string_mixins.py:316:    def _str_fullmatch(
./.venv/lib64/python3.11/site-packages/pydantic/v1/networks.py:355:            d = ascii_domain_regex().fullmatch(host)
./.venv/lib64/python3.11/site-packages/pydantic/v1/networks.py:357:                d = int_domain_regex().fullmatch(host)
./.venv/lib64/python3.11/site-packages/pydantic/v1/networks.py:364:                d = int_domain_regex().fullmatch(host)
./.venv/lib64/python3.11/site-packages/pydantic/v1/networks.py:725:    m = pretty_email_regex.fullmatch(value)
./.venv/lib64/python3.11/site-packages/pydantic/v1/color.py:239:    m = re.fullmatch(r_hex_short, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/v1/color.py:249:    m = re.fullmatch(r_hex_long, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/v1/color.py:259:    m = re.fullmatch(r_rgb, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/v1/color.py:263:    m = re.fullmatch(r_rgba, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/v1/color.py:267:    m = re.fullmatch(r_hsl, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/v1/color.py:272:    m = re.fullmatch(r_hsla, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:74:            st.from_regex('[A-Za-z0-9_]+( [A-Za-z0-9_]+){0,5}', fullmatch=True),
./.venv/lib64/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:114:        st.from_regex(_color_regexes, fullmatch=True),
./.venv/lib64/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:140:    st.from_regex('|'.join(card_patterns), fullmatch=True).map(add_luhn_digit),  # type: ignore[arg-type]
./.venv/lib64/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:260:    return st.from_regex(pattern.encode(), fullmatch=True)
./.venv/lib64/python3.11/site-packages/pydantic/networks.py:1291:    m = pretty_email_regex.fullmatch(value)
./.venv/lib64/python3.11/site-packages/pydantic/color.py:308:    m = re.fullmatch(r_hex_short, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/color.py:318:    m = re.fullmatch(r_hex_long, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/color.py:328:    m = re.fullmatch(r_rgb, value_lower) or re.fullmatch(r_rgb_v4_style, value_lower)
./.venv/lib64/python3.11/site-packages/pydantic/color.py:332:    m = re.fullmatch(r_hsl, value_lower) or re.fullmatch(r_hsl_v4_style, value_lower)
./.venv/lib64/python3.11/site-packages/starlette/middleware/cors.py:99:        if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):
./.venv/lib64/python3.11/site-packages/watchfiles/run.py:311:    elif re.fullmatch(r'[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)+', target):
./.venv/lib64/python3.11/site-packages/jedi/inference/value/klass.py:77:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jedi/inference/compiled/value.py:152:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jedi/inference/compiled/value.py:347:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jedi/inference/names.py:81:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jedi/inference/names.py:256:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jedi/inference/names.py:288:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jedi/inference/names.py:613:    def api_type(self):
./.venv/lib64/python3.11/site-packages/jinja2/lexer.py:755:                                if whitespace_re.fullmatch(text, l_pos):
./.venv/lib64/python3.11/site-packages/jinja2/filters.py:808:        if _uri_scheme_re.fullmatch(scheme) is None:
./.venv/lib64/python3.11/site-packages/attr/validators.py:164:            `re.fullmatch`, `re.search`, and `re.match`; the default `None`
./.venv/lib64/python3.11/site-packages/attr/validators.py:165:            means `re.fullmatch`. For performance reasons, the pattern is
./.venv/lib64/python3.11/site-packages/attr/validators.py:171:    valid_funcs = (re.fullmatch, None, re.search, re.match)
./.venv/lib64/python3.11/site-packages/attr/validators.py:193:        match_func = pattern.fullmatch
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:479:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:504:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:519:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:534:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:549:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:566:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:583:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:601:        Returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/textio.py:1569:        @param memoryMap: Memory map returned by L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:109:        restore_memory_snapshot, get_memory_map, get_mapped_filenames,
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:1975:        # + Maybe use mquery instead of get_memory_map?
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:1981:                for mbi in self.get_memory_map(lpBaseAddress, lpBaseAddress + nSize):
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:2985:    def get_memory_map(self, minAddr=None, maxAddr=None):
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:3061:        @param memoryMap: (Optional) Memory map returned by L{get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:3070:            memoryMap = self.get_memory_map()
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:3189:        memory = self.get_memory_map(minAddr, maxAddr)
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/interactive.py:887:        for mbi in process.get_memory_map():
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/interactive.py:1903:    # #        [~process] strings - extract ASCII strings from memory
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/interactive.py:2082:            memoryMap = process.get_memory_map()
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/crash.py:557:               See L{Process.get_memory_map}.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/crash.py:635:            self.memoryMap = process.get_memory_map()
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:304:            target_dll_run_on_dllmain = get_target_filename(is_target_process_64, "run_code_on_dllmain_", ".dll")
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:305:            if not target_dll_run_on_dllmain:
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:309:                print("\n--- Injecting run code dll: %s into pid: %s ---" % (os.path.basename(target_dll_run_on_dllmain), pid))
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:311:                args = [target_executable, str(pid), target_dll_run_on_dllmain]
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:10239:    Reads bytes from memory at the provided location.
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:10380:                    "description": "The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory.",
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:17219:            "description": "The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory.",
./.venv/lib64/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:17232:        :param string data: The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory.
./.venv/lib64/python3.11/site-packages/h11/_util.py:87:    match = regex.fullmatch(data)
./.venv/lib64/python3.11/site-packages/lark/lexer.py:312:        res = self.scanner.fullmatch(t.value)
./.venv/lib64/python3.11/site-packages/lark/lexer.py:392:    def fullmatch(self, text: str) -> Optional[str]:
./.venv/lib64/python3.11/site-packages/lark/lexer.py:394:            m = mre.fullmatch(text)
./.venv/lib64/python3.11/site-packages/numpy/ma/tests/test_extras.py:1602:    def test_unique_allmasked(self):
./.venv/lib64/python3.11/site-packages/numpy/ma/tests/test_extras.py:1894:    def test_ndenumerate_allmasked(self):
./.venv/lib64/python3.11/site-packages/numpy/ma/tests/test_core.py:2166:    def test_smallmask(self):
./.venv/lib64/python3.11/site-packages/numpy/ma/tests/test_core.py:2167:        # Checks the behaviour of _smallmask
./.venv/lib64/python3.11/site-packages/numpy/ma/tests/test_core.py:2173:        a._smallmask = False
./.venv/lib64/python3.11/site-packages/numpy/ma/__init__.py:39:.. moduleauthor:: Jarrod Millman
./.venv/lib64/python3.11/site-packages/numpy/lib/_utils_impl.py:561:        methods = pydoc.allmethods(object)
./.venv/lib64/python3.11/site-packages/psutil/_pswindows.py:166:pfullmem = namedtuple('pfullmem', pmem._fields + ('uss', ))
./.venv/lib64/python3.11/site-packages/psutil/_pswindows.py:854:        return pfullmem(*basic_mem + (uss,))
./.venv/lib64/python3.11/site-packages/psutil/_pssunos.py:106:pfullmem = pmem
./.venv/lib64/python3.11/site-packages/psutil/_psosx.py:102:pfullmem = namedtuple('pfullmem', pmem._fields + ('uss', ))
./.venv/lib64/python3.11/site-packages/psutil/_psosx.py:484:        return pfullmem(*basic_mem + (uss,))
./.venv/lib64/python3.11/site-packages/psutil/_pslinux.py:173:pfullmem = namedtuple('pfullmem', pmem._fields + ('uss', 'pss', 'swap'))
./.venv/lib64/python3.11/site-packages/psutil/_pslinux.py:1991:            return pfullmem(*basic_mem + (uss, pss, swap))
./.venv/lib64/python3.11/site-packages/psutil/_psbsd.py:147:pfullmem = pmem
./.venv/lib64/python3.11/site-packages/psutil/_psaix.py:90:pfullmem = pmem
./.venv/lib64/python3.11/site-packages/psutil/__init__.py:1167:        valid_types = list(_psplatform.pfullmem._fields)
./.venv/lib64/python3.11/site-packages/pycparser/ply/yacc.py:49:# using the algorithm found in Aho, Sethi, and Ullman "Compilers: Principles,
./.venv/lib64/python3.11/site-packages/pygments/lexers/teraterm.py:66:                r'callmenu|'
./.venv/lib64/python3.11/site-packages/pygments/lexers/matlab.py:993:                        "fillmissing",
./.venv/lib64/python3.11/site-packages/pygments/lexers/_vim_builtins.py:1263:        ('mkspellmem','mkspellmem'),
./.venv/lib64/python3.11/site-packages/pygments/lexers/_tsql_builtins.py:790:    'smallmoney',
./.venv/lib64/python3.11/site-packages/pygments/lexers/_stata_builtins.py:423:    "nt", "ntden", "nttail", "nullmat", "plural", "plurals1",
./.venv/lib64/python3.11/site-packages/pygments/lexers/_lilypond_builtins.py:1100:  "prallmordent",
./.venv/lib64/python3.11/site-packages/pygments/lexers/_lasso_builtins.py:4403:        'pullmimepost',
./.venv/lib64/python3.11/site-packages/tornado/test/util_test.py:331:        if m := re.fullmatch(r"(\d+)\.(\d+)\.(\d+)", version):
./.venv/lib64/python3.11/site-packages/tornado/test/util_test.py:334:        elif m := re.fullmatch(r"(\d+)\.(\d+)", version):
./.venv/lib64/python3.11/site-packages/tornado/test/util_test.py:337:        elif m := re.fullmatch(r"(\d+)\.(\d+)\.(\d+)(?:\.dev|a|b|rc)\d+", version):
./.venv/lib64/python3.11/site-packages/tornado/test/util_test.py:341:        elif m := re.fullmatch(r"(\d+)\.(\d+)(?:\.dev|a|b|rc)\d+", version):
./.venv/lib64/python3.11/site-packages/tornado/web.py:430:        if RequestHandler._VALID_HEADER_CHARS.fullmatch(retval) is None:
./.venv/lib64/python3.11/site-packages/tornado/http1connection.py:850:    if DIGITS.fullmatch(s) is None:
./.venv/lib64/python3.11/site-packages/tornado/http1connection.py:857:    if HEXDIGITS.fullmatch(s) is None:
./.venv/lib64/python3.11/site-packages/tornado/httputil.py:205:        if not _ABNF.field_name.fullmatch(name):
./.venv/lib64/python3.11/site-packages/tornado/httputil.py:208:            if not _ABNF.field_value.fullmatch(to_unicode(value)):
./.venv/lib64/python3.11/site-packages/tornado/httputil.py:275:                if not _ABNF.field_value.fullmatch(new_part[1:]):
./.venv/lib64/python3.11/site-packages/tornado/httputil.py:509:        if not _ABNF.host.fullmatch(self.host):
./.venv/lib64/python3.11/site-packages/tornado/httputil.py:1039:    match = _ABNF.request_line.fullmatch(line)
./.venv/lib64/python3.11/site-packages/tornado/httputil.py:1067:    match = _ABNF.status_line.fullmatch(line)
./.venv/lib64/python3.11/site-packages/urllib3/_collections.py:412:    getallmatchingheaders = getlist
./.venv/lib64/python3.11/site-packages/websockets/legacy/http.py:137:    if not _value_re.fullmatch(raw_reason):
./.venv/lib64/python3.11/site-packages/websockets/legacy/http.py:170:        if not _token_re.fullmatch(raw_name):
./.venv/lib64/python3.11/site-packages/websockets/legacy/http.py:173:        if not _value_re.fullmatch(raw_value):
./.venv/lib64/python3.11/site-packages/websockets/headers.py:159:    match = _quotable_re.fullmatch(value)
./.venv/lib64/python3.11/site-packages/websockets/headers.py:327:            if _token_re.fullmatch(value) is None:
./.venv/lib64/python3.11/site-packages/websockets/headers.py:481:        if not _token_re.fullmatch(subprotocol):
./.venv/lib64/python3.11/site-packages/websockets/server.py:303:                    and origin_or_regex.fullmatch(origin) is not None
./.venv/lib64/python3.11/site-packages/websockets/version.py:71:            match = re.fullmatch(description_re, description)
./.venv/lib64/python3.11/site-packages/websockets/version.py:86:        match = re.fullmatch(version_re, version)
./.venv/lib64/python3.11/site-packages/websockets/http11.py:263:        if not _value_re.fullmatch(raw_reason):
./.venv/lib64/python3.11/site-packages/websockets/http11.py:353:        if not _token_re.fullmatch(raw_name):
./.venv/lib64/python3.11/site-packages/websockets/http11.py:356:        if not _value_re.fullmatch(raw_value):
./.venv/lib64/python3.11/site-packages/pip/_vendor/urllib3/_collections.py:291:    getallmatchingheaders = getlist
./.venv/lib64/python3.11/site-packages/pip/_vendor/rich/markup.py:239:        "Click [link=https://www.willmcgugan.com]here[/link] to visit my Blog",
./.venv/lib64/python3.11/site-packages/pip/_vendor/rich/__main__.py:241:            "https://github.com/sponsors/willmcgugan",
./.venv/lib64/python3.11/site-packages/pip/_internal/utils/compatibility_tags.py:69:    match = re.fullmatch(r"android_(\d+)_(.+)", arch)
./.venv/lib64/python3.11/site-packages/pip/_internal/req/constructors.py:70:    match: re.Match[str] | None = re.fullmatch(
./.venv/lib64/python3.11/site-packages/setuptools/_vendor/zipp/glob.py:40:        Append '\Z' to imply fullmatch even when match is used.
./.venv/lib64/python3.11/site-packages/setuptools/_vendor/zipp/__init__.py:472:        matches = re.compile(prefix + tr.translate(pattern)).fullmatch
./.venv/lib64/python3.11/site-packages/setuptools/_vendor/jaraco/collections/__init__.py:38:        return obj.fullmatch
./.venv/lib/python3.11/site-packages/virtualenv/discovery/builtin.py:248:            match = pat.fullmatch(exe.name)
./.venv/lib/python3.11/site-packages/virtualenv/create/via_global_ref/builtin/cpython/common.py:59:    return interpreter.platform == "darwin" and _BREW.fullmatch(interpreter.system_prefix) is not None
./.venv/lib/python3.11/site-packages/jupyterlab_server/translation_utils.py:707:                    if pattern.fullmatch(path):
./.venv/lib/python3.11/site-packages/jupyter_server/auth/utils.py:76:        if pattern.fullmatch(url):
./.venv/lib/python3.11/site-packages/fastapi/routing.py:970:    def api_route(
./.venv/lib/python3.11/site-packages/fastapi/applications.py:1143:    def api_route(
./.venv/lib/python3.11/site-packages/jsonschema/_format.py:432:    return bool(_RE_DATE.fullmatch(instance) and date.fromisoformat(instance))
./.venv/lib/python3.11/site-packages/httpx/_urlparse.py:285:            if not COMPONENT_REGEX[key].fullmatch(value):
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:169:    # handle to the currently running llm task that appends suggestions to the
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:172:    _llm_task: asyncio.Task | None = None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:176:    _init_llm_provider: Callable | None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:178:    _llm_provider_instance: Any | None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:179:    _llm_prefixer: Callable = lambda self, x: "wrong"
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:185:        self._llm_provider_instance = None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:186:        self._init_llm_provider = None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:193:        self._cancel_running_llm_task()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:219:        self._cancel_running_llm_task()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:274:        self._cancel_running_llm_task()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:291:        self._cancel_running_llm_task()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:307:    def _cancel_running_llm_task(self) -> None:
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:309:        Try to cancel the currently running llm_task if exists, and set it to None.
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:311:        if self._llm_task is not None:
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:312:            if self._llm_task.done():
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:313:                self._llm_task = None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:315:            cancelled = self._llm_task.cancel()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:317:                self._llm_task = None
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:324:    def _llm_provider(self):
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:327:        Do not use in the constructor, as `_init_llm_provider` can trigger slow side-effects.
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:329:        if self._llm_provider_instance is None and self._init_llm_provider:
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:330:            self._llm_provider_instance = self._init_llm_provider()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:331:        return self._llm_provider_instance
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:333:    async def _trigger_llm(self, buffer) -> None:
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:335:        This will ask the current llm provider a suggestion for the current buffer.
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:337:        If there is a currently running llm task, it will cancel it.
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:344:        if not self._llm_provider:
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:350:        self._cancel_running_llm_task()
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:358:                await self._trigger_llm_core(buffer)
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:364:        self._llm_task = asyncio.create_task(error_catcher(buffer))
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:365:        await self._llm_task
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:367:    async def _trigger_llm_core(self, buffer: Buffer):
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:369:        This is the core of the current llm request.
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:371:        Here we build a compatible `InlineCompletionRequest` and ask the llm
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:398:        if not self._llm_provider:
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:402:        prefix = self._llm_prefixer(hm)
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:419:        async for reply_and_chunks in self._llm_provider.stream_inline_completions(
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:440:async def llm_autosuggestion(event: KeyPressEvent):
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/auto_suggest.py:459:    await provider._trigger_llm(event.current_buffer)
./.venv/lib/python3.11/site-packages/IPython/terminal/shortcuts/__init__.py:630:    auto_suggest.llm_autosuggestion,
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:440:    llm_constructor_kwargs = Dict(
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:443:        Extra arguments to pass to `llm_provider_class` constructor.
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:448:    llm_prefix_from_history = DottedObjectName(
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:452:    return a prefix to pass the llm provider in addition to the current buffer
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:465:    _llm_prefix_from_history: Any
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:467:    @observe("llm_prefix_from_history")
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:468:    def _llm_prefix_from_history_changed(self, change):
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:470:        self._llm_prefix_from_history = name
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:473:    llm_provider_class = DottedObjectName(
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:487:    _llm_provider_class: Any = None
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:489:    @observe("llm_provider_class")
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:490:    def _llm_provider_class_changed(self, change):
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:492:        self._llm_provider_class = provider_class
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:509:            if self._llm_provider_class:
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:511:                def init_llm_provider():
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:512:                    llm_provider_constructor = import_item(self._llm_provider_class)
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:513:                    return llm_provider_constructor(**self.llm_constructor_kwargs)
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:516:                init_llm_provider = None
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:519:            self.auto_suggest._init_llm_provider = init_llm_provider
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:521:            name = self.llm_prefix_from_history
./.venv/lib/python3.11/site-packages/IPython/terminal/interactiveshell.py:539:            self.auto_suggest._llm_prefixer = fun
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:27:    ...     format_type = 'x-vendor/llm'
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:28:    ...     print_method = '_repr_llm_'
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:31:    >>> llm_formatter = LLMFormatter(parent=ip.display_formatter)
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:33:    >>> ip.display_formatter.formatters[LLMFormatter.format_type] = llm_formatter
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:35:Now any class that define `_repr_llm_` will return a x-vendor/llm as part of
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:40:    ...     def _repr_llm_(self, *kwargs):
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:45:    ({'text/plain': '<IPython.core.formatters.A at ...>', 'x-vendor/llm': 'This a A'}, {})
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:50:    >>> def llm_int(obj):
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:53:    >>> llm_formatter.for_type(int, llm_int)
./.venv/lib/python3.11/site-packages/IPython/core/formatters.py:56:    ({'text/plain': '42', 'x-vendor/llm': 'This is the integer 42, in between 41 and 43'}, {})
./.venv/lib/python3.11/site-packages/IPython/core/completer.py:428:    - Insert any %magic and %%cellmagic completions in the alphabetical order
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:850:# str.fullmatch
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:854:def test_fullmatch(any_string_dtype):
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:859:    result = ser.str.fullmatch(".*BAD[_]+.*BAD")
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:871:def test_fullmatch_dollar_literal(any_string_dtype):
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:874:    result = ser.str.fullmatch("foo\\$")
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:886:def test_fullmatch_na_kwarg(any_string_dtype):
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:890:    result = ser.str.fullmatch(".*BAD[_]+.*BAD", na=False)
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:898:def test_fullmatch_case_kwarg(any_string_dtype):
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:906:    result = ser.str.fullmatch("ab", case=True)
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:911:    result = ser.str.fullmatch("ab", case=False)
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:914:    result = ser.str.fullmatch("ab", flags=re.IGNORECASE)
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:918:def test_fullmatch_compiled_regex(any_string_dtype):
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:921:    result = values.str.fullmatch(re.compile(r"ab"), case=False)
./.venv/lib/python3.11/site-packages/pandas/tests/strings/test_find_replace.py:1116:    result = data.str.fullmatch(pat, flags=re.IGNORECASE)
./.venv/lib/python3.11/site-packages/pandas/tests/strings/conftest.py:33:    ("fullmatch", ("a",), {}),
./.venv/lib/python3.11/site-packages/pandas/tests/extension/test_arrow.py:1893:def test_str_fullmatch(pat, case, na, exp):
./.venv/lib/python3.11/site-packages/pandas/core/strings/object_array.py:262:    def _str_fullmatch(
./.venv/lib/python3.11/site-packages/pandas/core/strings/object_array.py:275:        f = lambda x: regex.fullmatch(x) is not None
./.venv/lib/python3.11/site-packages/pandas/core/strings/base.py:97:    def _str_fullmatch(
./.venv/lib/python3.11/site-packages/pandas/core/strings/accessor.py:1374:        fullmatch : Stricter matching that requires the entire string to match.
./.venv/lib/python3.11/site-packages/pandas/core/strings/accessor.py:1392:    def fullmatch(self, pat, case: bool = True, flags: int = 0, na=lib.no_default):
./.venv/lib/python3.11/site-packages/pandas/core/strings/accessor.py:1423:        >>> ser.str.fullmatch(r'd.+')
./.venv/lib/python3.11/site-packages/pandas/core/strings/accessor.py:1429:        result = self._data.array._str_fullmatch(pat, case=case, flags=flags, na=na)
./.venv/lib/python3.11/site-packages/pandas/core/arrays/string_arrow.py:333:    _str_fullmatch = ArrowStringArrayMixin._str_fullmatch
./.venv/lib/python3.11/site-packages/pandas/core/arrays/_arrow_string_mixins.py:316:    def _str_fullmatch(
./.venv/lib/python3.11/site-packages/pydantic/v1/networks.py:355:            d = ascii_domain_regex().fullmatch(host)
./.venv/lib/python3.11/site-packages/pydantic/v1/networks.py:357:                d = int_domain_regex().fullmatch(host)
./.venv/lib/python3.11/site-packages/pydantic/v1/networks.py:364:                d = int_domain_regex().fullmatch(host)
./.venv/lib/python3.11/site-packages/pydantic/v1/networks.py:725:    m = pretty_email_regex.fullmatch(value)
./.venv/lib/python3.11/site-packages/pydantic/v1/color.py:239:    m = re.fullmatch(r_hex_short, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/v1/color.py:249:    m = re.fullmatch(r_hex_long, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/v1/color.py:259:    m = re.fullmatch(r_rgb, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/v1/color.py:263:    m = re.fullmatch(r_rgba, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/v1/color.py:267:    m = re.fullmatch(r_hsl, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/v1/color.py:272:    m = re.fullmatch(r_hsla, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:74:            st.from_regex('[A-Za-z0-9_]+( [A-Za-z0-9_]+){0,5}', fullmatch=True),
./.venv/lib/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:114:        st.from_regex(_color_regexes, fullmatch=True),
./.venv/lib/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:140:    st.from_regex('|'.join(card_patterns), fullmatch=True).map(add_luhn_digit),  # type: ignore[arg-type]
./.venv/lib/python3.11/site-packages/pydantic/v1/_hypothesis_plugin.py:260:    return st.from_regex(pattern.encode(), fullmatch=True)
./.venv/lib/python3.11/site-packages/pydantic/networks.py:1291:    m = pretty_email_regex.fullmatch(value)
./.venv/lib/python3.11/site-packages/pydantic/color.py:308:    m = re.fullmatch(r_hex_short, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/color.py:318:    m = re.fullmatch(r_hex_long, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/color.py:328:    m = re.fullmatch(r_rgb, value_lower) or re.fullmatch(r_rgb_v4_style, value_lower)
./.venv/lib/python3.11/site-packages/pydantic/color.py:332:    m = re.fullmatch(r_hsl, value_lower) or re.fullmatch(r_hsl_v4_style, value_lower)
./.venv/lib/python3.11/site-packages/starlette/middleware/cors.py:99:        if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):
./.venv/lib/python3.11/site-packages/watchfiles/run.py:311:    elif re.fullmatch(r'[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)+', target):
./.venv/lib/python3.11/site-packages/jedi/inference/value/klass.py:77:    def api_type(self):
./.venv/lib/python3.11/site-packages/jedi/inference/compiled/value.py:152:    def api_type(self):
./.venv/lib/python3.11/site-packages/jedi/inference/compiled/value.py:347:    def api_type(self):
./.venv/lib/python3.11/site-packages/jedi/inference/names.py:81:    def api_type(self):
./.venv/lib/python3.11/site-packages/jedi/inference/names.py:256:    def api_type(self):
./.venv/lib/python3.11/site-packages/jedi/inference/names.py:288:    def api_type(self):
./.venv/lib/python3.11/site-packages/jedi/inference/names.py:613:    def api_type(self):
./.venv/lib/python3.11/site-packages/jinja2/lexer.py:755:                                if whitespace_re.fullmatch(text, l_pos):
./.venv/lib/python3.11/site-packages/jinja2/filters.py:808:        if _uri_scheme_re.fullmatch(scheme) is None:
./.venv/lib/python3.11/site-packages/attr/validators.py:164:            `re.fullmatch`, `re.search`, and `re.match`; the default `None`
./.venv/lib/python3.11/site-packages/attr/validators.py:165:            means `re.fullmatch`. For performance reasons, the pattern is
./.venv/lib/python3.11/site-packages/attr/validators.py:171:    valid_funcs = (re.fullmatch, None, re.search, re.match)
./.venv/lib/python3.11/site-packages/attr/validators.py:193:        match_func = pattern.fullmatch
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:479:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:504:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:519:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:534:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:549:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:566:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:583:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/util.py:601:        Returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/textio.py:1569:        @param memoryMap: Memory map returned by L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:109:        restore_memory_snapshot, get_memory_map, get_mapped_filenames,
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:1975:        # + Maybe use mquery instead of get_memory_map?
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:1981:                for mbi in self.get_memory_map(lpBaseAddress, lpBaseAddress + nSize):
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:2985:    def get_memory_map(self, minAddr=None, maxAddr=None):
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:3061:        @param memoryMap: (Optional) Memory map returned by L{get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:3070:            memoryMap = self.get_memory_map()
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/process.py:3189:        memory = self.get_memory_map(minAddr, maxAddr)
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/interactive.py:887:        for mbi in process.get_memory_map():
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/interactive.py:1903:    # #        [~process] strings - extract ASCII strings from memory
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/interactive.py:2082:            memoryMap = process.get_memory_map()
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/crash.py:557:               See L{Process.get_memory_map}.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/winappdbg/crash.py:635:            self.memoryMap = process.get_memory_map()
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:304:            target_dll_run_on_dllmain = get_target_filename(is_target_process_64, "run_code_on_dllmain_", ".dll")
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:305:            if not target_dll_run_on_dllmain:
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:309:                print("\n--- Injecting run code dll: %s into pid: %s ---" % (os.path.basename(target_dll_run_on_dllmain), pid))
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/pydevd_attach_to_process/add_code_to_python_process.py:311:                args = [target_executable, str(pid), target_dll_run_on_dllmain]
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:10239:    Reads bytes from memory at the provided location.
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:10380:                    "description": "The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory.",
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:17219:            "description": "The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory.",
./.venv/lib/python3.11/site-packages/debugpy/_vendored/pydevd/_pydevd_bundle/_debug_adapter/pydevd_schema.py:17232:        :param string data: The bytes read from memory, encoded using base64. If the decoded length of `data` is less than the requested `count` in the original `readMemory` request, and `unreadableBytes` is zero or omitted, then the client should assume it's reached the end of readable memory.
./.venv/lib/python3.11/site-packages/h11/_util.py:87:    match = regex.fullmatch(data)
./.venv/lib/python3.11/site-packages/lark/lexer.py:312:        res = self.scanner.fullmatch(t.value)
./.venv/lib/python3.11/site-packages/lark/lexer.py:392:    def fullmatch(self, text: str) -> Optional[str]:
./.venv/lib/python3.11/site-packages/lark/lexer.py:394:            m = mre.fullmatch(text)
./.venv/lib/python3.11/site-packages/numpy/ma/tests/test_extras.py:1602:    def test_unique_allmasked(self):
./.venv/lib/python3.11/site-packages/numpy/ma/tests/test_extras.py:1894:    def test_ndenumerate_allmasked(self):
./.venv/lib/python3.11/site-packages/numpy/ma/tests/test_core.py:2166:    def test_smallmask(self):
./.venv/lib/python3.11/site-packages/numpy/ma/tests/test_core.py:2167:        # Checks the behaviour of _smallmask
./.venv/lib/python3.11/site-packages/numpy/ma/tests/test_core.py:2173:        a._smallmask = False
./.venv/lib/python3.11/site-packages/numpy/ma/__init__.py:39:.. moduleauthor:: Jarrod Millman
./.venv/lib/python3.11/site-packages/numpy/lib/_utils_impl.py:561:        methods = pydoc.allmethods(object)
./.venv/lib/python3.11/site-packages/psutil/_pswindows.py:166:pfullmem = namedtuple('pfullmem', pmem._fields + ('uss', ))
./.venv/lib/python3.11/site-packages/psutil/_pswindows.py:854:        return pfullmem(*basic_mem + (uss,))
./.venv/lib/python3.11/site-packages/psutil/_pssunos.py:106:pfullmem = pmem
./.venv/lib/python3.11/site-packages/psutil/_psosx.py:102:pfullmem = namedtuple('pfullmem', pmem._fields + ('uss', ))
./.venv/lib/python3.11/site-packages/psutil/_psosx.py:484:        return pfullmem(*basic_mem + (uss,))
./.venv/lib/python3.11/site-packages/psutil/_pslinux.py:173:pfullmem = namedtuple('pfullmem', pmem._fields + ('uss', 'pss', 'swap'))
./.venv/lib/python3.11/site-packages/psutil/_pslinux.py:1991:            return pfullmem(*basic_mem + (uss, pss, swap))
./.venv/lib/python3.11/site-packages/psutil/_psbsd.py:147:pfullmem = pmem
./.venv/lib/python3.11/site-packages/psutil/_psaix.py:90:pfullmem = pmem
./.venv/lib/python3.11/site-packages/psutil/__init__.py:1167:        valid_types = list(_psplatform.pfullmem._fields)
./.venv/lib/python3.11/site-packages/pycparser/ply/yacc.py:49:# using the algorithm found in Aho, Sethi, and Ullman "Compilers: Principles,
./.venv/lib/python3.11/site-packages/pygments/lexers/teraterm.py:66:                r'callmenu|'
./.venv/lib/python3.11/site-packages/pygments/lexers/matlab.py:993:                        "fillmissing",
./.venv/lib/python3.11/site-packages/pygments/lexers/_vim_builtins.py:1263:        ('mkspellmem','mkspellmem'),
./.venv/lib/python3.11/site-packages/pygments/lexers/_tsql_builtins.py:790:    'smallmoney',
./.venv/lib/python3.11/site-packages/pygments/lexers/_stata_builtins.py:423:    "nt", "ntden", "nttail", "nullmat", "plural", "plurals1",
./.venv/lib/python3.11/site-packages/pygments/lexers/_lilypond_builtins.py:1100:  "prallmordent",
./.venv/lib/python3.11/site-packages/pygments/lexers/_lasso_builtins.py:4403:        'pullmimepost',
./.venv/lib/python3.11/site-packages/tornado/test/util_test.py:331:        if m := re.fullmatch(r"(\d+)\.(\d+)\.(\d+)", version):
./.venv/lib/python3.11/site-packages/tornado/test/util_test.py:334:        elif m := re.fullmatch(r"(\d+)\.(\d+)", version):
./.venv/lib/python3.11/site-packages/tornado/test/util_test.py:337:        elif m := re.fullmatch(r"(\d+)\.(\d+)\.(\d+)(?:\.dev|a|b|rc)\d+", version):
./.venv/lib/python3.11/site-packages/tornado/test/util_test.py:341:        elif m := re.fullmatch(r"(\d+)\.(\d+)(?:\.dev|a|b|rc)\d+", version):
./.venv/lib/python3.11/site-packages/tornado/web.py:430:        if RequestHandler._VALID_HEADER_CHARS.fullmatch(retval) is None:
./.venv/lib/python3.11/site-packages/tornado/http1connection.py:850:    if DIGITS.fullmatch(s) is None:
./.venv/lib/python3.11/site-packages/tornado/http1connection.py:857:    if HEXDIGITS.fullmatch(s) is None:
./.venv/lib/python3.11/site-packages/tornado/httputil.py:205:        if not _ABNF.field_name.fullmatch(name):
./.venv/lib/python3.11/site-packages/tornado/httputil.py:208:            if not _ABNF.field_value.fullmatch(to_unicode(value)):
./.venv/lib/python3.11/site-packages/tornado/httputil.py:275:                if not _ABNF.field_value.fullmatch(new_part[1:]):
./.venv/lib/python3.11/site-packages/tornado/httputil.py:509:        if not _ABNF.host.fullmatch(self.host):
./.venv/lib/python3.11/site-packages/tornado/httputil.py:1039:    match = _ABNF.request_line.fullmatch(line)
./.venv/lib/python3.11/site-packages/tornado/httputil.py:1067:    match = _ABNF.status_line.fullmatch(line)
./.venv/lib/python3.11/site-packages/urllib3/_collections.py:412:    getallmatchingheaders = getlist
./.venv/lib/python3.11/site-packages/websockets/legacy/http.py:137:    if not _value_re.fullmatch(raw_reason):
./.venv/lib/python3.11/site-packages/websockets/legacy/http.py:170:        if not _token_re.fullmatch(raw_name):
./.venv/lib/python3.11/site-packages/websockets/legacy/http.py:173:        if not _value_re.fullmatch(raw_value):
./.venv/lib/python3.11/site-packages/websockets/headers.py:159:    match = _quotable_re.fullmatch(value)
./.venv/lib/python3.11/site-packages/websockets/headers.py:327:            if _token_re.fullmatch(value) is None:
./.venv/lib/python3.11/site-packages/websockets/headers.py:481:        if not _token_re.fullmatch(subprotocol):
./.venv/lib/python3.11/site-packages/websockets/server.py:303:                    and origin_or_regex.fullmatch(origin) is not None
./.venv/lib/python3.11/site-packages/websockets/version.py:71:            match = re.fullmatch(description_re, description)
./.venv/lib/python3.11/site-packages/websockets/version.py:86:        match = re.fullmatch(version_re, version)
./.venv/lib/python3.11/site-packages/websockets/http11.py:263:        if not _value_re.fullmatch(raw_reason):
./.venv/lib/python3.11/site-packages/websockets/http11.py:353:        if not _token_re.fullmatch(raw_name):
./.venv/lib/python3.11/site-packages/websockets/http11.py:356:        if not _value_re.fullmatch(raw_value):
./.venv/lib/python3.11/site-packages/pip/_vendor/urllib3/_collections.py:291:    getallmatchingheaders = getlist
./.venv/lib/python3.11/site-packages/pip/_vendor/rich/markup.py:239:        "Click [link=https://www.willmcgugan.com]here[/link] to visit my Blog",
./.venv/lib/python3.11/site-packages/pip/_vendor/rich/__main__.py:241:            "https://github.com/sponsors/willmcgugan",
./.venv/lib/python3.11/site-packages/pip/_internal/utils/compatibility_tags.py:69:    match = re.fullmatch(r"android_(\d+)_(.+)", arch)
./.venv/lib/python3.11/site-packages/pip/_internal/req/constructors.py:70:    match: re.Match[str] | None = re.fullmatch(
./.venv/lib/python3.11/site-packages/setuptools/_vendor/zipp/glob.py:40:        Append '\Z' to imply fullmatch even when match is used.
./.venv/lib/python3.11/site-packages/setuptools/_vendor/zipp/__init__.py:472:        matches = re.compile(prefix + tr.translate(pattern)).fullmatch
./.venv/lib/python3.11/site-packages/setuptools/_vendor/jaraco/collections/__init__.py:38:        return obj.fullmatch
./api_bridge.py:33:def llm_reply(
./api_bridge.py:257:    reply = llm_reply(msgs, temperature=0.65, max_tokens=900)
./server.py:14:    from mrd69.llm_client import LLMClient  # jeÅ›li instalujesz jako pakiet
./server.py:17:        from llm_client import LLMClient     # lokalnie
./server.py:24:llm = None
./server.py:27:        llm = LLMClient(
./server.py:108:    from memory_api import router as memory_router
./server.py:128:def api_health():
./server.py:138:def api_bootstrap():
./server.py:144:def api_history():
./server.py:148:def api_history_chat(chat_id: str):
./server.py:152:async def api_upload(file: UploadFile = File(...)):
./server.py:161:def api_chat(req: ChatRequest):
./server.py:174:        if llm:
./server.py:175:            reply = llm.chat(messages=current, temperature=0.4, max_tokens=800, stream=False)
./writing_all_pro.py:175:    from . import memory as _memory_mod
./writing_all_pro.py:249:        # Preferuj aktualny kontrakt poprzez singleton `get_memory()`
./writing_all_pro.py:250:        get_mem = getattr(memory, "get_memory", None)
./writing_all_pro.py:390:def llm_chat(
./writing_all_pro.py:432:def mini_llm_text(prompt: str, max_tokens: int = 256, temperature: float = 0.3) -> str:
./writing_all_pro.py:1221:        para = mini_llm_text(  # dostÄ™pne w pliku
./runpod_sync.py:19:from memory import _vacuum_if_needed
./reliability_core.py:330:                            if "llm" in str(e).lower() or "openai" in str(e).lower()
./reliability_core.py:388:    def record_llm_call(self, telemetry: TickTelemetry, duration: float):
./reliability_core.py:390:        telemetry.llm_calls += 1
./reliability_core.py:391:        telemetry.total_llm_time += duration
./reliability_core.py:430:        print(f"   Åšredni czas LLM: {batch_metrics['avg_llm_time']:.2f}s")
./reliability_core.py:446:            "avg_llm_time": sum(t.get("total_llm_time", 0) for t in batch) / len(batch),
./reliability_core.py:464:            "avg_llm_time": sum(m.get("avg_llm_time", 0) for m in recent) / len(recent),
./reliability_core.py:485:        self.llm_calls = 0
./reliability_core.py:486:        self.total_llm_time = 0.0
./reliability_core.py:501:            "llm_calls": self.llm_calls,
./reliability_core.py:502:            "total_llm_time": self.total_llm_time,
./reliability_core.py:640:        llm_start = time.time()
./reliability_core.py:646:            llm_duration = time.time() - llm_start
./reliability_core.py:647:            self.telemetry.record_llm_call(telemetry, llm_duration)
./reliability_core.py:651:                "llm_duration": llm_duration,
./reliability_core.py:656:            self.telemetry.record_error(telemetry, e, "llm_completion")
./programista.py:43:    from . import memory as _mem
./programista.py:119:def llm72(sysmsg: str, usermsg: str, temp: float = 0.28, max_t: int = 2600) -> str:
./programista.py:130:def llm4(prompt: str, temp: float = 0.18, max_t: int = 900) -> str:
./programista.py:286:    facts = llm4(prm, temp=0.12, max_t=700)
./programista.py:399:    notes = llm72(
./programista.py:540:    return llm72(sysm, prm, temp=0.26, max_t=1600)
./programista.py:552:    return llm72(sysm, prm, temp=0.26, max_t=2400)
./programista.py:582:    out = llm72(
./programista.py:628:    out = llm72(
./programista.py:641:        return {"ok": False, "error": "llm_fail"}
./programista.py:923:    raw = llm4(
./programista.py:1023:            final = llm72(
./programista.py:1050:            final = llm72("Asystent krypto. FACT-LOCK dla cen.", usr, 0.28, 1800)
./programista.py:1118:    final = llm72(sysm, usr, 0.26 if f_lock else 0.3, 2400).strip()
./programista.py:1340:        def api_reply(d: ReplyIn):
./programista.py:1351:        def api_run(d: RunIn):
./programista.py:1361:        def api_quality(d: QualityIn):
./programista.py:1365:        def api_learn(d: LearnIn):
./programista.py:1369:        def api_shell(d: ShellIn):
./memory.py:18:- LLM: OPENAI_API_KEY/OPENAI_KEY (uÅ¼ywane przez llm_simple.chat jeÅ›li masz swÃ³j wrapper)
./memory.py:46:    from llm_simple import chat as llm_chat  # type: ignore
./memory.py:48:    def llm_chat(*args, **kwargs):
./memory.py:143:    "llm": {"fails": 0, "open_until": 0.0},
./memory.py:837:        tid=id_or_text if re.fullmatch(r"[0-9a-f]{40}", id_or_text) else _id_for(id_or_text)
./memory.py:1186:            resp=(llm_chat(user_text=transcript, system_text=system_prompt, max_tokens=20) or "").strip().replace('"','').replace('.','')
./memory.py:1220:                resp=llm_chat(user_text="\n".join(m['content'] for m in convo if m.get('content')), system_text=prompt, max_tokens=300)
./memory.py:1308:                llm_note=llm_chat(user_text=f"Opisz krÃ³tko plik: {filename}, typ {mime}, rozmiar {size}. Podaj sÅ‚owa kluczowe.", system_text="Polski, 1-2 zdania, keywords.", max_tokens=120)
./memory.py:1309:                if isinstance(llm_note,str) and len(llm_note.strip())>5:
./memory.py:1310:                    desc = (llm_note.strip())[:500]
./memory.py:1356:def get_memory(namespace: Optional[str]=None)->"Memory":
./memory.py:1374:    mem=get_memory()
./memory.py:1377:    def api_stats(): return mem.stats()
./memory.py:1380:    def api_add_fact(text: str = Form(...), conf: float = Form(0.6), tags: str = Form("")):
./memory.py:1386:    def api_list_facts(limit: int=50): return mem.list_facts(limit=limit)
./memory.py:1389:    def api_del_fact(id_or_text: str):
./memory.py:1393:    def api_recall(q: str, topk: int=6):
./memory.py:1397:    def api_ctx(q: str, topk: int=8, limit: int=2200):
./memory.py:1401:    def api_stm_turn(user: str = Form(""), assistant: str = Form("")):
./memory.py:1410:    def api_stm_flush(): return mem.force_flush_stm()
./memory.py:1413:    def api_reflect(): return mem.reflect_now()
./memory.py:1416:    def api_predict(): return mem.predict_next_intent()
./memory.py:1419:    async def api_upload(file: UploadFile = File(...)):
./memory.py:1424:    def api_get_file(file_id: str):
./memory.py:1434:    def api_emotion(text: str = Form(...)):
./memory.py:1438:    def api_ner(text: str = Form(...)): return {"entities": ner(text)}
./memory.py:1441:    def api_wsd(word: str = Form(...), context: str = Form("")): return wsd(word, context)
./memory.py:1444:    def api_goal_add(title: str = Form(...), priority: float = Form(1.0), tags: str = Form("")):
./memory.py:1449:    def api_goals(): return mem.get_goals()
./memory.py:1452:    def api_profile_set(payload: str = Form(...)):
./memory.py:1483:    mem=get_memory()
./io_pipeline.py:44:    from . import memory as _m
./crypto_advisor_full.py:40:- memory.get_memory().add_fact(...) â€” fakty, alerty, raporty
./crypto_advisor_full.py:42:- common_llm.llm_main â€” generacja porad; domyÅ›lnie Qwen/Qwen2.5-72B-Instruct
./crypto_advisor_full.py:776:def _llm_chat(
./crypto_advisor_full.py:779:    # Try to use common_llm if available
./crypto_advisor_full.py:780:    common_llm_available = False
./crypto_advisor_full.py:784:        if importlib.util.find_spec("common_llm") is not None:
./crypto_advisor_full.py:785:            common_llm_available = True
./crypto_advisor_full.py:789:    if common_llm_available:
./crypto_advisor_full.py:791:            from common_llm import llm_main  # type: ignore
./crypto_advisor_full.py:793:            out = llm_main.chat(
./crypto_advisor_full.py:800:            print(f"Error using common_llm: {e}")
./crypto_advisor_full.py:923:    txt = _llm_chat(
./crypto_advisor_full.py:971:        from memory import get_memory  # type: ignore
./crypto_advisor_full.py:973:        return get_memory()
./autonauka.py:143:        from memory import get_memory
./autonauka.py:145:        return get_memory()
./autonauka.py:256:def _llm_chat(
./autonauka.py:656:    out = _llm_chat(sys, usr, maxtok=256, temp=0.0) or ""
./autonauka.py:679:    response = _llm_chat(system_prompt, user_prompt, maxtok=64, temp=0.0)
./autonauka.py:948:def _llm_draft(materials: list[dict], query: str) -> str:
./autonauka.py:957:    sources_for_llm = []
./autonauka.py:967:        sources_for_llm.append(source_info)
./autonauka.py:988:{json.dumps(sources_for_llm, ensure_ascii=False, indent=2)}
./autonauka.py:1067:    draft = _llm_draft(mats, q)
